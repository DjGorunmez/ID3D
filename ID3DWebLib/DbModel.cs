// Licence file C:\Users\G-Lap\OneDrive\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace ID3DWebLib
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<Company> Companies { get; set; } // Company
        DbSet<House> Houses { get; set; } // House
        DbSet<Nwo> Nwoes { get; set; } // NWO
        DbSet<Package> Packages { get; set; } // Packages
        DbSet<Profile> Profiles { get; set; } // Profiles
        DbSet<Project> Projects { get; set; } // Project
        DbSet<School> Schools { get; set; } // School
        DbSet<Status> Status { get; set; } // Status
        DbSet<Wallet> Wallets { get; set; } // Wallet
        DbSet<WalletLog> WalletLogs { get; set; } // WalletLog

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<Company> Companies { get; set; } // Company
        public DbSet<House> Houses { get; set; } // House
        public DbSet<Nwo> Nwoes { get; set; } // NWO
        public DbSet<Package> Packages { get; set; } // Packages
        public DbSet<Profile> Profiles { get; set; } // Profiles
        public DbSet<Project> Projects { get; set; } // Project
        public DbSet<School> Schools { get; set; } // School
        public DbSet<Status> Status { get; set; } // Status
        public DbSet<Wallet> Wallets { get; set; } // Wallet
        public DbSet<WalletLog> WalletLogs { get; set; } // WalletLog

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=localhost\SQLEXPRESS;Initial Catalog=ID3D;Integrated Security=True;MultipleActiveResultSets=True;Encrypt=false;TrustServerCertificate=true");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new CompanyConfiguration());
            modelBuilder.ApplyConfiguration(new HouseConfiguration());
            modelBuilder.ApplyConfiguration(new NwoConfiguration());
            modelBuilder.ApplyConfiguration(new PackageConfiguration());
            modelBuilder.ApplyConfiguration(new ProfileConfiguration());
            modelBuilder.ApplyConfiguration(new ProjectConfiguration());
            modelBuilder.ApplyConfiguration(new SchoolConfiguration());
            modelBuilder.ApplyConfiguration(new StatusConfiguration());
            modelBuilder.ApplyConfiguration(new WalletConfiguration());
            modelBuilder.ApplyConfiguration(new WalletLogConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Company> Companies { get; set; } // Company
        public DbSet<House> Houses { get; set; } // House
        public DbSet<Nwo> Nwoes { get; set; } // NWO
        public DbSet<Package> Packages { get; set; } // Packages
        public DbSet<Profile> Profiles { get; set; } // Profiles
        public DbSet<Project> Projects { get; set; } // Project
        public DbSet<School> Schools { get; set; } // School
        public DbSet<Status> Status { get; set; } // Status
        public DbSet<Wallet> Wallets { get; set; } // Wallet
        public DbSet<WalletLog> WalletLogs { get; set; } // WalletLog

        public FakeMyDbContext()
        {
            _database = new FakeDatabaseFacade(new MyDbContext());

            Companies = new FakeDbSet<Company>("Id");
            Houses = new FakeDbSet<House>("Id");
            Nwoes = new FakeDbSet<Nwo>("Id");
            Packages = new FakeDbSet<Package>("Id");
            Profiles = new FakeDbSet<Profile>("Id");
            Projects = new FakeDbSet<Project>("Id");
            Schools = new FakeDbSet<School>("Id");
            Status = new FakeDbSet<Status>("Id");
            Wallets = new FakeDbSet<Wallet>("Id");
            WalletLogs = new FakeDbSet<WalletLog>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }

    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> :
        DbSet<TEntity>,
        IQueryable<TEntity>,
        IAsyncEnumerable<TEntity>,
        IListSource,
        IResettableService
        where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private ObservableCollection<TEntity> _data;
        private IQueryable _query;
        public override IEntityType EntityType { get; }

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity), cancellationToken));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities), cancellationToken);
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray();        RemoveRange(array);
            AddRange(array);
        }

        bool IListSource.ContainsListCollection => true;

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public override IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

        public void ResetState()
        {
            _data  = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Task ResetStateAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.Factory.StartNew(() => ResetState());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override Task CommitTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override void RollbackTransaction()
        {
        }

        public override Task RollbackTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public Guid TransactionId => Guid.NewGuid();
        public void Commit() { }
        public void Rollback() { }
        public Task CommitAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public Task RollbackAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public void Dispose() { }
        public ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Company
    public class Company
    {
        public int Id { get; set; } // Id (Primary key)
        public int IdProject { get; set; } // IdProject
        public Guid IdAddress { get; set; } // IdAddress
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 150)
        public DateTime CreationDate { get; set; } // CreationDate
        public bool Enabled { get; set; } // Enabled
        public string CompanyId { get; set; } // CompanyId (length: 150)
        public int Employees { get; set; } // Employees

        // Foreign keys

        /// <summary>
        /// Parent Project pointed by [Company].([IdProject]) (FK_Company_Project)
        /// </summary>
        public Project Project { get; set; } // FK_Company_Project

        public Company()
        {
            CreationDate = DateTime.Now;
            Enabled = true;
            Employees = 1;
        }
    }

    // House
    public class House
    {
        public int Id { get; set; } // Id (Primary key)
        public Guid IdAddress { get; set; } // IdAddress
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 150)
        public DateTime CreationDate { get; set; } // CreationDate
        public bool Enabled { get; set; } // Enabled
        public int NumberOfLiving { get; set; } // NumberOfLiving
        public DateTime BuildingCreated { get; set; } // BuildingCreated
        public int Parcel { get; set; } // Parcel
        public int LivableParcel { get; set; } // LivableParcel
        public int Rooms { get; set; } // Rooms
        public string Extra { get; set; } // Extra (length: 500)
        public decimal Price { get; set; } // Price
        public string Type { get; set; } // Type (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Nwoes where [NWO].[IdHome] point to this entity (FK_NWO_House)
        /// </summary>
        public ICollection<Nwo> Nwoes { get; set; } // NWO.FK_NWO_House

        public House()
        {
            CreationDate = DateTime.Now;
            Enabled = true;
            BuildingCreated = DateTime.Now;
            Nwoes = new List<Nwo>();
        }
    }

    // NWO
    public class Nwo
    {
        public int Id { get; set; } // Id (Primary key)
        public int IdStatus { get; set; } // IdStatus
        public int? IdSchool { get; set; } // IdSchool
        public int? IdProject { get; set; } // IdProject
        public int IdHome { get; set; } // IdHome
        public DateTime HomeAssignDate { get; set; } // HomeAssignDate
        public bool Graduated { get; set; } // Graduated
        public string Diploma { get; set; } // Diploma (length: 150)

        // Reverse navigation

        /// <summary>
        /// Child Profiles where [Profiles].[IdNWO] point to this entity (FK_Profiles_NWO)
        /// </summary>
        public ICollection<Profile> Profiles { get; set; } // Profiles.FK_Profiles_NWO

        // Foreign keys

        /// <summary>
        /// Parent House pointed by [NWO].([IdHome]) (FK_NWO_House)
        /// </summary>
        public House House { get; set; } // FK_NWO_House

        /// <summary>
        /// Parent Project pointed by [NWO].([IdProject]) (FK_NWO_Project)
        /// </summary>
        public Project Project { get; set; } // FK_NWO_Project

        /// <summary>
        /// Parent School pointed by [NWO].([IdSchool]) (FK_NWO_School)
        /// </summary>
        public School School { get; set; } // FK_NWO_School

        /// <summary>
        /// Parent Status pointed by [NWO].([IdStatus]) (FK_NWO_Status)
        /// </summary>
        public Status Status { get; set; } // FK_NWO_Status

        public Nwo()
        {
            IdStatus = 8;
            Profiles = new List<Profile>();
        }
    }

    // Packages
    public class Package
    {
        public int Id { get; set; } // Id (Primary key)
        public string Text { get; set; } // Text (length: 50)
        public string Description { get; set; } // Description
        public bool Enabled { get; set; } // Enabled
        public DateTime CreationDate { get; set; } // CreationDate

        // Reverse navigation

        /// <summary>
        /// Child Profiles where [Profiles].[IdPackage] point to this entity (FK_Profiles_Packages)
        /// </summary>
        public ICollection<Profile> Profiles { get; set; } // Profiles.FK_Profiles_Packages

        public Package()
        {
            CreationDate = DateTime.Now;
            Profiles = new List<Profile>();
        }
    }

    // Profiles
    public class Profile
    {
        public int Id { get; set; } // Id (Primary key)
        public int? IdPackage { get; set; } // IdPackage
        public int? IdWallet { get; set; } // IdWallet
        public int? IdNwo { get; set; } // IdNWO
        public bool Enabled { get; set; } // Enabled
        public string Username { get; set; } // Username (length: 350)
        public string Password { get; set; } // Password (length: 350)
        public int? LoginCount { get; set; } // LoginCount
        public DateTime? LastLoginDate { get; set; } // LastLoginDate
        public string Ip { get; set; } // IP (length: 150)
        public DateTime CreationDate { get; set; } // CreationDate
        public DateTime ExpireDate { get; set; } // ExpireDate
        public int? MaxDevices { get; set; } // MaxDevices
        public string ImageUrl { get; set; } // ImageUrl
        public string VideoUrl { get; set; } // VideoUrl
        public bool? Synced { get; set; } // Synced
        public bool Verified { get; set; } // Verified
        public DateTime? VerifiedDate { get; set; } // VerifiedDate
        public string FullName { get; set; } // FullName (length: 150)
        public string Email { get; set; } // Email (length: 150)

        // Foreign keys

        /// <summary>
        /// Parent Nwo pointed by [Profiles].([IdNwo]) (FK_Profiles_NWO)
        /// </summary>
        public Nwo Nwo { get; set; } // FK_Profiles_NWO

        /// <summary>
        /// Parent Package pointed by [Profiles].([IdPackage]) (FK_Profiles_Packages)
        /// </summary>
        public Package Package { get; set; } // FK_Profiles_Packages

        /// <summary>
        /// Parent Wallet pointed by [Profiles].([IdWallet]) (FK_Profiles_Wallet)
        /// </summary>
        public Wallet Wallet { get; set; } // FK_Profiles_Wallet

        public Profile()
        {
            Enabled = false;
            CreationDate = DateTime.Now;
            MaxDevices = 0;
            Verified = false;
        }
    }

    // Project
    public class Project
    {
        public int Id { get; set; } // Id (Primary key)
        public Guid IdAddress { get; set; } // IdAddress
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 150)
        public DateTime CreationDate { get; set; } // CreationDate
        public bool Enabled { get; set; } // Enabled

        // Reverse navigation

        /// <summary>
        /// Child Companies where [Company].[IdProject] point to this entity (FK_Company_Project)
        /// </summary>
        public ICollection<Company> Companies { get; set; } // Company.FK_Company_Project

        /// <summary>
        /// Child Nwoes where [NWO].[IdProject] point to this entity (FK_NWO_Project)
        /// </summary>
        public ICollection<Nwo> Nwoes { get; set; } // NWO.FK_NWO_Project

        public Project()
        {
            CreationDate = DateTime.Now;
            Enabled = true;
            Companies = new List<Company>();
            Nwoes = new List<Nwo>();
        }
    }

    // School
    public class School
    {
        public int Id { get; set; } // Id (Primary key)
        public Guid IdAddress { get; set; } // IdAddress
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description (length: 150)
        public DateTime CreationDate { get; set; } // CreationDate
        public bool Enabled { get; set; } // Enabled

        // Reverse navigation

        /// <summary>
        /// Child Nwoes where [NWO].[IdSchool] point to this entity (FK_NWO_School)
        /// </summary>
        public ICollection<Nwo> Nwoes { get; set; } // NWO.FK_NWO_School

        public School()
        {
            CreationDate = DateTime.Now;
            Enabled = true;
            Nwoes = new List<Nwo>();
        }
    }

    // Status
    public class Status
    {
        public int Id { get; set; } // Id (Primary key)
        public string Text { get; set; } // Text (length: 50)
        public bool Enabled { get; set; } // Enabled
        public DateTime CreationDate { get; set; } // CreationDate

        // Reverse navigation

        /// <summary>
        /// Child Nwoes where [NWO].[IdStatus] point to this entity (FK_NWO_Status)
        /// </summary>
        public ICollection<Nwo> Nwoes { get; set; } // NWO.FK_NWO_Status

        public Status()
        {
            CreationDate = DateTime.Now;
            Nwoes = new List<Nwo>();
        }
    }

    // Wallet
    public class Wallet
    {
        public int Id { get; set; } // Id (Primary key)
        public decimal Amount { get; set; } // Amount
        public DateTime? UpdateDate { get; set; } // UpdateDate
        public DateTime CreationDate { get; set; } // CreationDate

        // Reverse navigation

        /// <summary>
        /// Child Profiles where [Profiles].[IdWallet] point to this entity (FK_Profiles_Wallet)
        /// </summary>
        public ICollection<Profile> Profiles { get; set; } // Profiles.FK_Profiles_Wallet

        /// <summary>
        /// Child WalletLogs where [WalletLog].[IdWallet] point to this entity (FK_WalletLog_Wallet)
        /// </summary>
        public ICollection<WalletLog> WalletLogs { get; set; } // WalletLog.FK_WalletLog_Wallet

        public Wallet()
        {
            Amount = 0m;
            CreationDate = DateTime.Now;
            Profiles = new List<Profile>();
            WalletLogs = new List<WalletLog>();
        }
    }

    // WalletLog
    public class WalletLog
    {
        public Guid Id { get; set; } // Id (Primary key)
        public int IdWallet { get; set; } // IdWallet
        public decimal Amount { get; set; } // Amount
        public DateTime CreationDate { get; set; } // CreationDate

        // Foreign keys

        /// <summary>
        /// Parent Wallet pointed by [WalletLog].([IdWallet]) (FK_WalletLog_Wallet)
        /// </summary>
        public Wallet Wallet { get; set; } // FK_WalletLog_Wallet

        public WalletLog()
        {
            Id = Guid.NewGuid();
            CreationDate = DateTime.Now;
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Company
    public class CompanyConfiguration : IEntityTypeConfiguration<Company>
    {
        public void Configure(EntityTypeBuilder<Company> builder)
        {
            builder.ToTable("Company", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Company").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdProject).HasColumnName(@"IdProject").HasColumnType("int").IsRequired();
            builder.Property(x => x.IdAddress).HasColumnName(@"IdAddress").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Employees).HasColumnName(@"Employees").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Project).WithMany(b => b.Companies).HasForeignKey(c => c.IdProject).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Company_Project");
        }
    }

    // House
    public class HouseConfiguration : IEntityTypeConfiguration<House>
    {
        public void Configure(EntityTypeBuilder<House> builder)
        {
            builder.ToTable("House", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_House").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdAddress).HasColumnName(@"IdAddress").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            builder.Property(x => x.NumberOfLiving).HasColumnName(@"NumberOfLiving").HasColumnType("int").IsRequired();
            builder.Property(x => x.BuildingCreated).HasColumnName(@"BuildingCreated").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Parcel).HasColumnName(@"Parcel").HasColumnType("int").IsRequired();
            builder.Property(x => x.LivableParcel).HasColumnName(@"LivableParcel").HasColumnType("int").IsRequired();
            builder.Property(x => x.Rooms).HasColumnName(@"Rooms").HasColumnType("int").IsRequired();
            builder.Property(x => x.Extra).HasColumnName(@"Extra").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal(18,18)").HasPrecision(18,18).IsRequired();
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
        }
    }

    // NWO
    public class NwoConfiguration : IEntityTypeConfiguration<Nwo>
    {
        public void Configure(EntityTypeBuilder<Nwo> builder)
        {
            builder.ToTable("NWO", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_NWO").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdStatus).HasColumnName(@"IdStatus").HasColumnType("int").IsRequired();
            builder.Property(x => x.IdSchool).HasColumnName(@"IdSchool").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IdProject).HasColumnName(@"IdProject").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IdHome).HasColumnName(@"IdHome").HasColumnType("int").IsRequired();
            builder.Property(x => x.HomeAssignDate).HasColumnName(@"HomeAssignDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Graduated).HasColumnName(@"Graduated").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Diploma).HasColumnName(@"Diploma").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);

            // Foreign keys
            builder.HasOne(a => a.House).WithMany(b => b.Nwoes).HasForeignKey(c => c.IdHome).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_NWO_House");
            builder.HasOne(a => a.Project).WithMany(b => b.Nwoes).HasForeignKey(c => c.IdProject).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_NWO_Project");
            builder.HasOne(a => a.School).WithMany(b => b.Nwoes).HasForeignKey(c => c.IdSchool).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_NWO_School");
            builder.HasOne(a => a.Status).WithMany(b => b.Nwoes).HasForeignKey(c => c.IdStatus).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_NWO_Status");
        }
    }

    // Packages
    public class PackageConfiguration : IEntityTypeConfiguration<Package>
    {
        public void Configure(EntityTypeBuilder<Package> builder)
        {
            builder.ToTable("Packages", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Packages").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Text).HasColumnName(@"Text").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime").IsRequired();
        }
    }

    // Profiles
    public class ProfileConfiguration : IEntityTypeConfiguration<Profile>
    {
        public void Configure(EntityTypeBuilder<Profile> builder)
        {
            builder.ToTable("Profiles", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Profiles").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdPackage).HasColumnName(@"IdPackage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IdWallet).HasColumnName(@"IdWallet").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IdNwo).HasColumnName(@"IdNWO").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar(350)").IsRequired(false).HasMaxLength(350);
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar(350)").IsRequired(false).HasMaxLength(350);
            builder.Property(x => x.LoginCount).HasColumnName(@"LoginCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LastLoginDate).HasColumnName(@"LastLoginDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ExpireDate).HasColumnName(@"ExpireDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.MaxDevices).HasColumnName(@"MaxDevices").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ImageUrl).HasColumnName(@"ImageUrl").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.VideoUrl).HasColumnName(@"VideoUrl").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Synced).HasColumnName(@"Synced").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Verified).HasColumnName(@"Verified").HasColumnType("bit").IsRequired();
            builder.Property(x => x.VerifiedDate).HasColumnName(@"VerifiedDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);

            // Foreign keys
            builder.HasOne(a => a.Nwo).WithMany(b => b.Profiles).HasForeignKey(c => c.IdNwo).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Profiles_NWO");
            builder.HasOne(a => a.Package).WithMany(b => b.Profiles).HasForeignKey(c => c.IdPackage).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Profiles_Packages");
            builder.HasOne(a => a.Wallet).WithMany(b => b.Profiles).HasForeignKey(c => c.IdWallet).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Profiles_Wallet");
        }
    }

    // Project
    public class ProjectConfiguration : IEntityTypeConfiguration<Project>
    {
        public void Configure(EntityTypeBuilder<Project> builder)
        {
            builder.ToTable("Project", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Project").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdAddress).HasColumnName(@"IdAddress").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
        }
    }

    // School
    public class SchoolConfiguration : IEntityTypeConfiguration<School>
    {
        public void Configure(EntityTypeBuilder<School> builder)
        {
            builder.ToTable("School", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_School").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdAddress).HasColumnName(@"IdAddress").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(150)").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(150)").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
        }
    }

    // Status
    public class StatusConfiguration : IEntityTypeConfiguration<Status>
    {
        public void Configure(EntityTypeBuilder<Status> builder)
        {
            builder.ToTable("Status", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Status").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Text).HasColumnName(@"Text").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime").IsRequired();
        }
    }

    // Wallet
    public class WalletConfiguration : IEntityTypeConfiguration<Wallet>
    {
        public void Configure(EntityTypeBuilder<Wallet> builder)
        {
            builder.ToTable("Wallet", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Wallet").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("decimal(18,18)").HasPrecision(18,18).IsRequired();
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime").IsRequired();
        }
    }

    // WalletLog
    public class WalletLogConfiguration : IEntityTypeConfiguration<WalletLog>
    {
        public void Configure(EntityTypeBuilder<WalletLog> builder)
        {
            builder.ToTable("WalletLog", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_WalletLog").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.IdWallet).HasColumnName(@"IdWallet").HasColumnType("int").IsRequired();
            builder.Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("decimal(18,18)").HasPrecision(18,18).IsRequired();
            builder.Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Wallet).WithMany(b => b.WalletLogs).HasForeignKey(c => c.IdWallet).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WalletLog_Wallet");
        }
    }


    #endregion

}
// </auto-generated>
